import type { TradeRecord } from './App'

const DB_NAME = 'TradeDB'
const STORE_NAME = 'records'
const DB_VERSION = 1

/** üîπ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—ë—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ */
function openDB(): Promise<IDBDatabase> {
    return new Promise((resolve, reject) => {
        const request = indexedDB.open(DB_NAME, DB_VERSION)
        request.onerror = () => reject(request.error)
        request.onsuccess = () => resolve(request.result)

        request.onupgradeneeded = () => {
            const db = request.result
            if (!db.objectStoreNames.contains(STORE_NAME)) {
                db.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true })
            }
        }
    })
}

/** üîπ –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */
function waitForTransaction(tx: IDBTransaction): Promise<void> {
    return new Promise((resolve, reject) => {
        tx.oncomplete = () => resolve()
        tx.onerror = () => reject(tx.error)
        tx.onabort = () => reject(tx.error)
    })
}

/** üîπ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –±–∞–∑—É) */
export async function saveRecords(records: TradeRecord[]) {
    await clearRecords() // –æ—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
    const db = await openDB()
    const tx = db.transaction(STORE_NAME, 'readwrite')
    const store = tx.objectStore(STORE_NAME)

    for (const rec of records) {
        store.add(rec)
    }

    await waitForTransaction(tx)
}

/** üîπ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ IndexedDB */
export async function loadRecords(): Promise<TradeRecord[]> {
    const db = await openDB()
    const tx = db.transaction(STORE_NAME, 'readonly')
    const store = tx.objectStore(STORE_NAME)

    return new Promise((resolve, reject) => {
        const req = store.getAll()
        req.onsuccess = () => resolve(req.result)
        req.onerror = () => reject(req.error)
    })
}

/** üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ (—É–¥–æ–±–Ω–æ –ø—Ä–∏ handleAdd) */
export async function addRecord(record: TradeRecord) {
    const db = await openDB()
    const tx = db.transaction(STORE_NAME, 'readwrite')
    const store = tx.objectStore(STORE_NAME)
    store.add(record)
    await waitForTransaction(tx)
}

/** üîπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π */
export async function clearRecords() {
    const db = await openDB()
    const tx = db.transaction(STORE_NAME, 'readwrite')
    const store = tx.objectStore(STORE_NAME)
    store.clear()
    await waitForTransaction(tx)
}

/** üîπ –û—Ü–µ–Ω–∫–∞ –æ–±—ä—ë–º–∞ –ø–∞–º—è—Ç–∏ (IndexedDB –Ω–µ –¥–∞—ë—Ç —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ) */
/** üîπ –û—Ü–µ–Ω–∫–∞ –æ–±—ä—ë–º–∞ –ø–∞–º—è—Ç–∏ (IndexedDB –Ω–µ –¥–∞—ë—Ç —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ) */
export async function estimateStorage(): Promise<string> {
    if ('storage' in navigator && 'estimate' in navigator.storage) {
        const estimate = await navigator.storage.estimate()
        const quota = estimate.quota || 0
        const usage = estimate.usage || 0
        return `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${(usage / 1024 / 1024).toFixed(2)} –ú–ë –∏–∑ ${(quota / 1024 / 1024).toFixed(2)} –ú–ë`
    }
    return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
}

